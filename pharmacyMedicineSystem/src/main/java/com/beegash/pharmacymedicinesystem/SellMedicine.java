/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.beegash.pharmacymedicinesystem;

import static com.beegash.pharmacymedicinesystem.MedicineListBackUp.medicineList;
import java.sql.*;
import javax.swing.DefaultListModel;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fener
 */
public class SellMedicine extends javax.swing.JFrame {

    String url = "jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL";
    String username = "root";
    String password = "1287";

    Connection conn;

    String[] columnNames = {"Sale Id", "Company Name", "Medicine Name", "Pieces", "Delivery"};
    DefaultTableModel model = new DefaultTableModel(columnNames, 0);
    private DefaultTableModel tableModel;

    DefaultListModel<String> medicineListModel = new DefaultListModel<>();

    DefaultListModel<String> companyListModel = new DefaultListModel<>();
    static ArrayList<Sale> saleList = new ArrayList<>();

    /**
     * Creates new form SellMedicine
     */
    public SellMedicine() {
        tableModel = new DefaultTableModel();
        tableSale = new JTable(tableModel);

        initComponents();
        setLocationRelativeTo(null);

        setLocationRelativeTo(null);
        try (Connection connection = DriverManager.getConnection(url, username, password)) {

            String companyQuery = "SELECT company_name FROM companytable";
            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(companyQuery)) {
                while (resultSet.next()) {
                    String companyName = resultSet.getString("company_name");
                    companyListModel.addElement(companyName);
                }
            }

            String medicineQuery = "SELECT medicine_name FROM medicinetable";
            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(medicineQuery)) {
                while (resultSet.next()) {
                    String medicineName = resultSet.getString("medicine_name");
                    medicineListModel.addElement(medicineName);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        /*
        model.addColumn("Company Name");
        model.addColumn("Medicine Name");
        model.addColumn("Number of Pieces");
        model.addColumn("Shipment Option");
         */
        listMedicine.setModel(medicineListModel);
        listCompany.setModel(companyListModel);
        /*for (Sale sll : saleList) {
            Object[] row = {sll.getCompanyName(), sll.getMedicineName(), sll.getNumberOfPieces(), sll.getShipment()};
            model.addRow(row);
            refreshTable();
        }*/
        loadSaleData();
        tableSale.setModel(model);

    }

    @Override
    public void setVisible(boolean b) {
        System.out.println("The visibility of the SellMedicine window is being set to: " + b);
        super.setVisible(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCompany = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMedicine = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNumberOfPieces = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        boxShipment = new javax.swing.JComboBox<>();
        btnSale = new javax.swing.JButton();
        btnCloseWindow = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSale = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane2.setViewportView(listCompany);

        jScrollPane1.setViewportView(listMedicine);

        jLabel4.setText("Medicine List:");

        jLabel3.setText("Company List:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Number of Pieces:");

        txtNumberOfPieces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberOfPiecesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Shipment Preferences:");

        boxShipment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BEGACORP LOGISTICS", "SKY LOGISTICS", "Network Global Lojistik A.Åž.", "Heisenberg Shipping Denizcilik Gemi Acenteligi Ltd.", "Delmar Marine", "CMA CGM Group", "Evergreen Marine", "Pacific International Lines." }));

        btnSale.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSale.setText("Sell Medicine");
        btnSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(txtNumberOfPieces, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxShipment, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(btnSale))))
                    .addComponent(jLabel4))
                .addGap(0, 45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumberOfPieces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxShipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSale))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnCloseWindow.setText("Close Window");
        btnCloseWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseWindowActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sale ID", "Company Name", "Medicine Name", "Pieces", "Delivery"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableSale);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCloseWindow)
                .addGap(15, 15, 15))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCloseWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void refreshTable() {
        model.setRowCount(0);

        String sql = "SELECT * FROM saletable";
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "1287");
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tableSale.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});

            }

        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }
    }

    private void loadSaleData() {
        model.setColumnIdentifiers(new String[]{"Sale ID", "Company Name", "Medicine Name", "Pieces", " Delivery"});
        model.setRowCount(0);

        try (Connection connection = DriverManager.getConnection(url, username, password); Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery("SELECT * FROM saletable")) {

            while (resultSet.next()) {
                int id = resultSet.getInt("sale_id");
                String name = resultSet.getString("sale_company");
                String surname = resultSet.getString("sale_medicine");
                int advance = resultSet.getInt("sale_number");
                String requeststatus = resultSet.getString("sale_shipment");
                model.addRow(new Object[]{id, name, surname, advance, requeststatus});
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public boolean checkStock(String medicineName, int numberOfPieces) {
        String url = "jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "1287";
        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String query = "SELECT stock FROM medicinetable WHERE medicine_name = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, medicineName);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        int stock = resultSet.getInt("stock");
                        if (stock >= numberOfPieces) {
                            int newStock = stock - numberOfPieces;
                            String updateQuery = "UPDATE medicinetable SET stock = ? WHERE medicine_name = ?";
                            try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                                updateStatement.setInt(1, newStock);
                                updateStatement.setString(2, medicineName);
                                updateStatement.executeUpdate();
                            }

                            return true;
                        }
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private int getLastSaleId() {
        int lastSaleId = 0;
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "1287")) {
            String query = "SELECT MAX(sale_id) FROM saletable";
            PreparedStatement statement = connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                lastSaleId = resultSet.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return lastSaleId;
    }
    private void btnSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaleActionPerformed
        // TODO add your handling code here:

        int saleId = getLastSaleId() + 1;
        String medicineName = listMedicine.getSelectedValue();
        String companyName = listCompany.getSelectedValue();
        int numberOfPieces;
        String shipment = (String) boxShipment.getSelectedItem();
        if (medicineName == null || companyName == null) {
            JOptionPane.showMessageDialog(this, "Please select a medicine and a company.");
            return;
        }
        try {
            numberOfPieces = Integer.parseInt(txtNumberOfPieces.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for number of pieces.");
            return;
        }

        if (!checkStock(medicineName, numberOfPieces)) {
            JOptionPane.showMessageDialog(this, "Not enough stock for selected medicine.");
            return;
        }

        Sale sale = new Sale(saleId, medicineName, companyName, numberOfPieces, shipment);

        Object[] row = {sale.getCompanyName(), sale.getMedicineName(), sale.getNumberOfPieces(), sale.getShipment()};
        model.addRow(row);
        loadSaleData();
        for (Medicine medicine : MedicineList.medicineList) {
            if (medicine.getMedicineName().equals(medicineName)) {
                medicine.setStock(medicine.getStock() - numberOfPieces);
                break;
            }
        }
        Sale sales = new Sale(saleId, companyName, medicineName, numberOfPieces, shipment);
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "1287");
            String query = "INSERT INTO saletable (sale_id, sale_company, sale_medicine, sale_number, sale_shipment) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setInt(1, sales.getSaleId());
            stmt.setString(2, sales.getCompanyName());
            stmt.setString(3, sales.getMedicineName());
            stmt.setInt(4, sales.getNumberOfPieces());
            stmt.setString(5, sales.getShipment());

            stmt.executeUpdate();
            stmt.close();
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while adding the medicine to the database.");
            loadSaleData();
            return;
        }
        saleList.add(sales);
        String sql = "SELECT * FROM saletable";
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "1287");
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tableSale.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new String[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9)});

            }

        } catch (Exception ex) {
            System.out.println("Error" + ex.getMessage());
        }
        loadSaleData();


    }//GEN-LAST:event_btnSaleActionPerformed

    private void btnCloseWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseWindowActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseWindowActionPerformed

    private void txtNumberOfPiecesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumberOfPiecesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumberOfPiecesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellMedicine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxShipment;
    private javax.swing.JButton btnCloseWindow;
    private javax.swing.JButton btnSale;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listCompany;
    private javax.swing.JList<String> listMedicine;
    private javax.swing.JTable tableSale;
    private javax.swing.JTextField txtNumberOfPieces;
    // End of variables declaration//GEN-END:variables
}
